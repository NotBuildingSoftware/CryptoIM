package main;


import java.io.*;
import java.net.*;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.*;

//ipconfig -all

public class ServerWindow extends javax.swing.JFrame {
	
	private ArrayList clientOutputStreams;
    private ArrayList<String> onlineUsers;
    private PublicKey publicKey;
    private PrivateKey privateKey;

	public class ClientHandler implements Runnable	{
		BufferedReader reader;
		Socket sock;
        PrintWriter client;


		public ClientHandler(Socket clientSocket, PrintWriter user) {
		// new inputStreamReader and then add it to a BufferedReader
            client = user;
			try {
				sock = clientSocket;
				InputStreamReader isReader = new InputStreamReader(sock.getInputStream());
				reader = new BufferedReader(isReader);
			} // end try
			catch (Exception ex) {
				outputPane.append("Error beginning StreamReader. \n");
			} // end catch

		} // end ClientHandler()

		public void run() {
            String message;
			String[] data;

			try {
				while ((message = reader.readLine()) != null) {

					//outputPane.append("Received: " + message + "\n");
					data = message.split(":");
                    

                    if (data[0].equals("REGISTER")) {
                    	// "REGISTER :{ name : publicKey }
                        userAdd(data[1]+":"+ data[2]);
                        
                        // Userliste dem neuen User schicken
                        for (Iterator<String> it = onlineUsers.iterator(); it.hasNext();) { 
                    		String userSpec = it.next();
                            sendUserSpec(userSpec, data[1]+":"+ data[2]); 
                        }

					} else if(data[0].equals("SEND MSG")) {
						//SEND MSG : msg : sender : reciever
						for (Iterator<String> it = onlineUsers.iterator(); it.hasNext();) { 
                    		String currentUser = it.next();
                    		if(currentUser.split(":")[0].equals(data[3])){
                    			tellUser(data[1], data[2], currentUser);
                    		}
                        }
						
					} else if(data[0].equals("DISCONNECT")) {
						//DISCONNECT : name
						for (Iterator<String> it = onlineUsers.iterator(); it.hasNext();) { 
                    		String currentUser = it.next();
                    		if(currentUser.split(":")[0].equals(data[1])){
                    			tellEveryone("REMOVE USER:"+data[1]);
                    			
                    			int index = onlineUsers.indexOf(currentUser);
                    			onlineUsers.remove(index);
                    			onlineUsers.trimToSize();
                    			clientOutputStreams.remove(index);
                    			clientOutputStreams.trimToSize();
                    			
                    			outputPane.append(data[1]+" has disconnected. \n");
                    		}
                        }
					}
                    else {
                        outputPane.append("No Conditions were met. \n");
                    }


			     } // end while
			} // end try
			catch (Exception ex) {
				outputPane.append("Lost a connection. \n");
                //ex.printStackTrace();
                clientOutputStreams.remove(client);
			} // end catch
		} // end run()
	} // end class ClientHandler
    /** Creates new form ServerWindow */
    public ServerWindow() {
        initComponents();
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        outputPane = new javax.swing.JTextArea();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("House Server");

        outputPane.setColumns(20);
        outputPane.setEditable(false);
        outputPane.setLineWrap(true);
        outputPane.setRows(5);
        outputPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(outputPane);

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(stopButton, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(stopButton))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        Thread starter = new Thread(new ServerStart());
        starter.start();

        outputPane.append("Server started. \n");
    }                                           

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:

        //tellEveryone("Server:is stopping and all users will be disconnected.\n:Chat");
        outputPane.append("Server stopping... \n");

    }                                          

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerWindow().setVisible(true);
            }
        });
    }


    public class ServerStart implements Runnable {
        public void run() {
        	clientOutputStreams = new ArrayList();
            onlineUsers = new ArrayList();  
            
            // Schl√ºssel generieren			
    		try {
    			// zufaelligen Key erzeugen
    			KeyPairGenerator keygen = KeyPairGenerator.getInstance("RSA");
    			keygen.initialize(2048);
    			KeyPair keyPair = keygen.genKeyPair();
    					 
    			// schluessel lesen
    			privateKey = keyPair.getPrivate();
    			publicKey = keyPair.getPublic();
    		} catch (NoSuchAlgorithmException e) {
    			e.printStackTrace();
    		}

            try {
                ServerSocket serverSock = new ServerSocket(5000);

                while (true) {
					// set up the server writer function and then begin at the same
				  	// the listener using the Runnable and Thread
					Socket clientSock = serverSock.accept();
					PrintWriter writer = new PrintWriter(clientSock.getOutputStream());
					clientOutputStreams.add(writer);
	
					// use a Runnable to start a 'second main method that will run
					// the listener
					Thread listener = new Thread(new ClientHandler(clientSock, writer));
					listener.start();
					outputPane.append("Got a connection. \n");
				} // end while
		} // end try
		catch (Exception ex)
		{
			outputPane.append("Error making a connection. \n");
			ex.printStackTrace();
		} // end catch

	} // end go()
    }

	public void userAdd (String userSpec) {
        
		onlineUsers.add(userSpec);
		
		outputPane.append(userSpec.split(":")[0] + " has connected\n");
        outputPane.setCaretPosition(outputPane.getDocument().getLength());
		
        tellEveryone("ADD USER:"+userSpec);
	}

	public void userRemove (String userSpec) {
                onlineUsers.remove(userSpec);
                
                tellEveryone("REMOVE USER:"+userSpec);
	}
	
	public void sendUserSpec(String userSpec, String user){
		
		Iterator it = clientOutputStreams.iterator();
		int index = onlineUsers.indexOf(user);
		int counter = 0;
		
		while (it.hasNext()) {
			try {
				PrintWriter writer = (PrintWriter) it.next();
				if(counter++ == index){
					writer.println("ADD USER:"+userSpec);
	                writer.flush();
				}           
			} // end try
			catch (Exception ex) {
				outputPane.append("Error telling everyone. \n");
			} // end catch
		} // end while
	}
	
	public void tellUser(String message, String sender, String reciver){
		
		Iterator it = clientOutputStreams.iterator();
		int index = onlineUsers.indexOf(reciver);
		int counter = 0;
		
		while (it.hasNext()) {
			try {
				PrintWriter writer = (PrintWriter) it.next();
				if(counter++ == index){
					writer.println("ADD MSG:"+message+":"+sender);
	                writer.flush();
	                outputPane.append(sender+" send Message to "+reciver.split(":")[0]+"\n");
				}           
			} // end try
			catch (Exception ex) {
				outputPane.append("Error telling everyone. \n");
			} // end catch
		} // end while
	}

    public void tellEveryone(String message) {
	// sends message to everyone connected to server
	Iterator it = clientOutputStreams.iterator();
	
		while (it.hasNext()) {
			try {
				PrintWriter writer = (PrintWriter) it.next();
				writer.println(message);
				//outputPane.append("Sending(all) --> " + message + "\n");
                writer.flush();
                outputPane.setCaretPosition(outputPane.getDocument().getLength());
                
			} // end try
			catch (Exception ex) {
				outputPane.append("Error telling everyone. \n");
			} // end catch
		} // end while
	} // end tellEveryone()


    // Variables declaration - do not modify                     
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea outputPane;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    // End of variables declaration                   

}
